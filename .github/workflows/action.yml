name: foodgram_workflow

on: push

jobs:
  tests:
    name: Testing
    runs-on: ubuntu-latest
    steps:
    - name: Check out the repo
      uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        cd backend/
        pip install -r requirements.txt

  build_and_push:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - name: Check out the repo
      uses: actions/checkout@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to Docker
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Push to DockerHub
      uses: docker/build-push-action@v2
      with:
        context: backend/
        push: true
        tags: xostyara/foodgram_backend:latest
  
  deploy:
    name: Deploy MyServer
    runs-on: ubuntu-latest
    needs: build_and_push
    if:
      contains(
        'refs/heads/master',
        github.ref)
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          stack_file_name: docker-compose.yaml
          script: |
            sudo docker pull xostyara/foodgram_frontend:latest
            sudo docker pull xostyara/foodgram_backend:latest
            cd infra
            sudo docker compose stop
            sudo docker compose rm backend
            touch .env
            echo SENTRY_DNS=*** >> .env
            echo DJANGO_SECRET_KEY=*** >> .env
            echo DB_ENGINE=*** >> .env
            echo DB_NAME=*** >> .env
            echo POSTGRES_USER=*** >> .env
            echo POSTGRES_PASSWORD=*** >> .env
            echo DB_HOST=*** >> .env
            echo DB_PORT=*** >> .env
            sudo docker compose up -d
            
  send_message:
    name: Telegram - Send message
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: ${{ github.workflow }} успешно выполнен!